#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

REPO_URL=https://github.com/Wignesh/.dotfiles.git
REPO_PATH="$HOME/.dotfiles"

reset_color=$(tput sgr 0)

info() {
    printf "%s[*] %s%s\n" "$(tput setaf 4)" "$1" "$reset_color"
}

success() {
    printf "%s[*] %s%s\n" "$(tput setaf 2)" "$1" "$reset_color"
}

err() {
    printf "%s[*] %s%s\n" "$(tput setaf 1)" "$1" "$reset_color"
}

warn() {
    printf "%s[*] %s%s\n" "$(tput setaf 3)" "$1" "$reset_color"
}

apply_brew_taps() {
    local tap_packages=$*
    for tap in $tap_packages; do
        if brew tap | grep "$tap" > /dev/null; then
            warn "Tap $tap is already applied"
        else
            brew tap "$tap"
        fi
    done
}

install_brew_formulas() {
    local formulas=$*
    for formula in $formulas; do
        if brew list --formula | grep "$formula" > /dev/null; then
            warn "Formula $formula is already installed"
        else
            info "Installing package < $formula >"
            brew install "$formula"
        fi
    done
}

install_brew_casks() {
    local casks=$*
    for cask in $casks; do
        if brew list --casks | grep "$cask" > /dev/null; then
            warn "Cask $cask is already installed"
        else
            info "Installing cask < $cask >"
            brew install --cask "$cask"
        fi
    done
}


install_xcode() {
    if xcode-select -p > /dev/null; then
        warn "xCode Command Line Tools already installed"
    else
        info "Installing xCode Command Line Tools..."
        xcode-select --install
        sudo xcodebuild -license accept
    fi
}


install_homebrew() {
    export HOMEBREW_CASK_OPTS="--appdir=/Applications"
    if hash brew &>/dev/null; then
        warn "Homebrew already installed"
    else
        info "Installing homebrew..."
        sudo --validate  # reset `sudo` timeout to use Homebrew install in noninteractive mode
        CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
}

install_packages() {
    taps=(
        hashicorp/tap
        homebrew/cask
        homebrew/cask-fonts
        homebrew/core
        vmware-tanzu/carvel
        moncho/dry
        teamookla/speedtest
        heroku/brew
        cockroachdb/tap
        cloudflare/cloudflare
        datawire/blackbird
    )
    
    packages=(
        coreutils                   # https://www.gnu.org/software/coreutils/
        gnupg                       # privacy package https://gnupg.org/
        bat                         # styled cat https://github.com/sharkdp/bat
        broot                       # navigate directory trees https://dystroy.org/broot/
        cmake                       # cross-platform make https://cmake.org/
        links                       # browser http://links.twibright.com/
        youtube-dl                  # yt downloader https://youtube-dl.org/
        tldr                        # man page https://tldr.sh/
        tmux                        # terminal multiplexer https://github.com/tmux/tmux/wiki
        tree                        # recurive dir listing http://mama.indstate.edu/users/ice/tree/
        gping                       # ping with graph https://github.com/orf/gping
        okteto                      # dev in k8s https://okteto.com/
        watch                       # execure cmd periodically https://gitlab.com/procps-ng/procps
        kind                        # local k8s cluster https://kind.sigs.k8s.io/
        k9s                         # k8s cli/ui https://k9scli.io/
        ffmpeg                      # media tool https://ffmpeg.org/
        aws-vault                   # aws secret storage https://github.com/99designs/aws-vault
        cloudflare-wrangler         # cli for cf workers https://github.com/cloudflare/wrangler
        cockroach                   # CockroachDB cli https://github.com/cockroachdb/homebrew-tap
        cloudflared                 # cloudflare tunel client https://github.com/cloudflare/cloudflared
        curl                        # https://curl.se/
        go                          # https://go.dev/
        hashicorp/tap/terraform     # terraform https://www.terraform.io/
        hashicorp/tap/consul        # service mesh from hc https://www.consul.io/
        hashicorp/tap/packer        # auomate machine image https://www.packer.io/
        hashicorp/tap/boundary      # secure remote access https://www.boundaryproject.io/
        hashicorp/tap/nomad         # scheduler and workload orchestrator https://www.nomadproject.io/
        hashicorp/tap/waypoint      # app deployment https://www.waypointproject.io/
        pulumi                      # cloud native dev platform https://pulumi.io/
        dry                         # docker manager cli https://github.com/moncho/dry
        speedtest                   # speedtest cli https://www.speedtest.net/
        heroku                      # heroku cli https://www.heroku.com/
        telepresence                # fast local k8s development https://www.telepresence.io/
        kubespy                     # observing k8s resources in realtime https://github.com/pulumi/kubespy
        http-server                 # https://github.com/http-party/http-server
        h2o                         # HTTP/1.x and HTTP/2 server https://github.com/h2o/h2o/
        httpie                      # cURL replacement https://httpie.io/
        automake                    # makefile generator https://www.gnu.org/software/automake/
        unar                        # unarchiving tool https://theunarchiver.com/command-line
        git-lfs                     # versioning large files https://github.com/git-lfs/git-lfs
        ack                         # search tool https://beyondgrep.com/
        mitmproxy                   # https proxy https://mitmproxy.org/
        fswatch                     # file change monitor https://github.com/emcrisostomo/fswatch
        rclone                      # rsync for cloud storage https://rclone.org/
        syncthing                   # file sync tool https://syncthing.net/
        rsync                       # incremental file transfer https://rsync.samba.org/
        netcat                      # manage network connection https://netcat.sourceforge.io/
        pstree                      # ps as tree http://www.thp.uni-duisburg.de/pstree/
        iftop                       # interface bandwidth usage https://www.ex-parrot.com/~pdw/iftop/
        caddy                       # web server with https https://caddyserver.com/
        coredns                     # dns server https://coredns.io/
        fx                          # json processing https://github.com/antonmedv/fx
        k6                          # load testing https://k6.io/
        secretive                   # store ssh in secure https://github.com/maxgoedjen/secretive
        exa                         # ls replacement https://the.exa.website/
        hss                         # parallel ssh client https://github.com/six-ddc/hss
        asciinema                   # record & share terminal session https://asciinema.org/
        iperf3                      # mesure tcp, udp bandwidth https://github.com/esnet/iperf
        lxc                         # lxd cli https://linuxcontainers.org/
        pyenv                       # python version management https://github.com/pyenv/pyenv
        ansible                     # ansible cli https://www.ansible.com/
        imagemagick                 # manipulate images https://imagemagick.org/index.php
        jq                          # JSON processor https://stedolan.github.io/jq/
        kubernetes-cli              # kubectl https://kubernetes.io/
        krew                        # kubectl plugins manager https://sigs.k8s.io/krew/
        kubectx                     # mange k8s ctx https://github.com/ahmetb/kubectx
        kubergrunt                  # https://github.com/gruntwork-io/kubergrunt
        lazydocker                  # docker terminal UI https://github.com/jesseduffield/lazydocker
        libpq                       # postgres api library https://www.postgresql.org/docs/14/libpq.html
        minikube                    # local k8s cluster https://minikube.sigs.k8s.io/docs/
        mas                         # mac app store cli https://github.com/mas-cli/mas
        nmap                        # port scanner https://nmap.org/
        ncrack                      # network auth cracking https://nmap.org/ncrack/
        openjdk                     # jdk https://openjdk.java.net/
        openssl                     # Cryptography and SSL/TLS Toolkit https://openssl.org/
        python3                     # python https://www.python.org/
        python@3.7                  # python 3.7 https://www.python.org/
        protobuf                    # data interchange format https://github.com/protocolbuffers/protobuf/
        rustup-init                 # Rust toolchain installer  https://github.com/rust-lang/rustup
        sqlite                      # sqlite CLI https://sqlite.org/index.html
        stern                       # tail multiple pods on k8s https://github.com/stern/stern
        stow                        # symlink manager https://www.gnu.org/software/stow/
        telnet                      # telent cli https://opensource.apple.com/
        websocat                    # telnet-like for websockets https://github.com/vi/websocat
        yarn                        # js package manager https://yarnpkg.com/
        wget                        # file retriver https://www.gnu.org/software/wget/
        openssh                     # ssh conectivity tool https://www.openssh.com/
        helm                        # k8s package manager https://helm.sh/
        svn                         # svn
        git                         #
        gh                          #

    )
    
    info "Configuring taps"
    apply_brew_taps "${taps[@]}"
    
    info "Installing packages..."
    install_brew_formulas "${packages[@]}"
    
    info "Cleaning up brew packages..."
    brew cleanup
    
}

install_fonts() {
    
    fonts=(
        font-caskaydia-cove-nerd-font
        font-consolas-for-powerline
        font-fira-code-nerd-font
        font-fira-code
        font-menlo-for-powerline
        font-meslo-lg-dz
        font-meslo-lg-nerd-font
        font-meslo-lg
        font-jetbrains-mono
        font-source-code-pro
    )
    
    info "Installing fonts..."
    brew tap homebrew/cask-fonts
    install_brew_casks "${fonts[@]}"
}

install_macos_apps() {
    apps=(
        stretchly               # break time reminder https://hovancik.net/stretchly/
        istat-menus             # system monitor app https://bjango.com/mac/istatmenus/
        meetingbar              # show meeting in menubar https://github.com/leits/MeetingBar
        rectangle               # window snap area https://rectangleapp.com/
        altair-graphql-client   # graphql client https://altair.sirmuel.design/
        google-chrome           # google chrome browser https://www.google.com/chrome/
        clickup                 # productivity platform https://clickup.com/
        dozer                   # hide status bar icons https://github.com/Mortennn/Dozer
        maccy                   # cloipboard manager https://maccy.app/
        firefox                 # firefox browser https://www.mozilla.org/firefox/
        obsidian                # md editor https://obsidian.md/
        google-cloud-sdk        # gcp cli, sdks https://cloud.google.com/sdk/
        jetbrains-toolbox       # jetbrains tools manager https://www.jetbrains.com/toolbox-app/
        notion                  # notion https://www.notion.so/
        discord                 # voice text https://discord.com/
        mockoon                 # mock api local https://mockoon.com/
        vlc                     # multimedia player
        slack                   # team communication https://slack.com/
        zoom                    # video communication https://www.zoom.us/
        muzzle                  # silence notifications https://muzzleapp.com/
        tower                   # git client
        postman                 # api development https://www.postman.com/
        docker                  # container runtime https://www.docker.com/
        webex                   # video communication https://www.webex.com/
        sourcetree              # git client https://www.sourcetreeapp.com/
        burp-suite              # security testing https://portswigger.net/burp/
        burp-suite-professional # professional security testing https://portswigger.net/burp/pro
        insomnia                # http & graphql client https://insomnia.rest/
        cloudflare-warp         # warp client https://cloudflarewarp.com/
        iterm2                  # terminal emulator https://www.iterm2.com/
        visual-studio-code      # code editor https://code.visualstudio.com/
        google-drive            # google drive client https://www.google.com/drive/
        brave-browser           # privacy focused browser https://brave.com/
        fig                     # terminal autocomplete https://fig.io/
        figma                   # collabrartive team https://www.figma.com/
        adobe-creative-cloud    # adobe toolbox https://www.adobe.com/creativecloud.html
        lens                    # k8s ide https://k8slens.dev/
        microsoft-office        # ms office https://products.office.com/mac/microsoft-office-for-mac/
        virtualbox              # virtualizer https://www.virtualbox.org/
        vagrant                 # dev environment https://www.vagrantup.com/
        vagrant-manager         # vagrant manager https://www.vagrantmanager.com/
        multipass               # orchestrates virtual ubuntu instances https://github.com/canonical/multipass/

    )
    masApps=(
        926036361     # LastPass Password Manager
    )
    
    info "Installing macOS apps..."
    install_brew_casks "${apps[@]}"
    
    info "Installing App Store apps..."
    for app in $masApps; do
        mas install $app
    done
}

install_oh_my_zsh() {
    if [[ ! -f ~/.zshrc ]]; then
        info "Installing oh my zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        
        chmod 744 ~/.oh-my-zsh/oh-my-zsh.sh
        
        info "Installing powerlevel10k"
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
        git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
        git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
    else
        warn "oh-my-zsh already installed"
    fi
}

stow_dotfiles() {

    local files=(
        ".gitconfig"
        ".zshrc"
        ".p10k.sh"
        ".config/iterm2/com.googlecode.iterm2.plist"
    )

    info "Removing existing config files"

    for f in $files; do
        rm -rf "$HOME/$f"
    done

    local dotfiles="git iterm2 zsh"

    stow -d ~/.dotfiles/.dots --verbose 1 -t ~/ $dotfiles

}

info "Bootstraping..."

install_xcode
install_homebrew

info "Cloning .dotfiles repo from $REPO_URL into $REPO_PATH"
git clone "$REPO_URL" "$REPO_PATH"

info "Change path to $REPO_PATH"
cd "$REPO_PATH" >/dev/null

info "======= Homebrew packages ======="
install_packages
success "Finished installing Homebrew packages"

info "======= Homebrew Fonts ======="
install_fonts
success "Finished installing fonts"

info "======= MacOS Apps ======="
install_macos_apps
success "Finished installing macOS apps"

info "======= Oh-my-zsh ======="
install_oh_my_zsh
success "Finished installing Oh-my-zsh"

info "Installing nvm..."

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

info "Installing aws cli..."

curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"

sudo installer -pkg AWSCLIV2.pkg -target /

aws --version

rm AWSCLIV2.pkg || true

info "======= Configuration ======="
stow_dotfiles

success "Finished stowing dotfiles"

success "Done"

info "System needs to restart. Restart?"

select yn in "y" "n"; do
    case $yn in
        y ) sudo shutdown -r now; break;;
        n ) exit;;
    esac
done