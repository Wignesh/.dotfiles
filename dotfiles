#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

REPO_URL=https://github.com/Wignesh/.dotfiles.git
REPO_PATH="$HOME/.dotfiles"

reset_color=$(tput sgr 0)

info() {
    printf "%s[*] %s%s\n" "$(tput setaf 4)" "$1" "$reset_color"
}

success() {
    printf "%s[*] %s%s\n" "$(tput setaf 2)" "$1" "$reset_color"
}

err() {
    printf "%s[*] %s%s\n" "$(tput setaf 1)" "$1" "$reset_color"
}

warn() {
    printf "%s[*] %s%s\n" "$(tput setaf 3)" "$1" "$reset_color"
}

install_xcode() {
    if ! xcode-select --print-path &> /dev/null; then
        info "XCode Command Line Tools are required to install Homebrew"
        info "XCode is not installed. Installing XCode Command Line Tools..."
        info "Please complete the installation process, then re-run"
        xcode-select --install
        exit 1
    else
        info "XCode Command Line Tools installed"
    fi
}

apply_mac_settings() {
    sudo -v
    # set touchpad tracking speed to maximum
    defaults write -g com.apple.trackpad.scaling -float 3.0

    # auto hide dock
    defaults write com.apple.dock autohide -bool true

    # dock position on left
    defaults write com.apple.dock orientation -string "left"

    # enable tap to click
    defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true

    # disable screen saver
    defaults -currentHost write com.apple.screensaver idleTime -int 0

    # dock size small
    defaults write com.apple.dock tilesize -int 36

    #dock enable magnification
    defaults write com.apple.dock magnification -bool true

    # dont' show recent applications in dock
    defaults write com.apple.dock show-recents -bool false

    # show bluetooth in menu bar
    defaults write ~/Library/Preferences/ByHost/com.apple.controlcenter.plist Bluetooth -int 2

    # show battery percentage in menu bar
    defaults write ~/Library/Preferences/ByHost/com.apple.controlcenter.plist BatteryShowPercentage -bool true

    # clock show seconds
    defaults write ~/Library/Preferences/com.apple.menuextra.clock DateFormat -string "EEE MMM d  h:mm:ss a"

    # Finder: show hidden files by default
    defaults write com.apple.finder AppleShowAllFiles -bool true

    # Finder: show status bar
    defaults write com.apple.finder ShowStatusBar -bool true

    # Finder: show path bar
    defaults write com.apple.finder ShowPathbar -bool true

    # Disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Show the ~/Library folder
    chflags nohidden ~/Library

    # Show the /Volumes folder
    sudo chflags nohidden /Volumes
}

install_homebrew() {
    if hash brew &>/dev/null; then
        warn "Homebrew already installed, skipping..."
    else
        info "Installing homebrew..."
        sudo --validate
        CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        info "Please enter your password if requested"
        success "Homebrew installed"
    fi
}

install_zsh_plugins() {
    if [ -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]; then
        warn "zsh-autosuggestions already installed, skipping..."
    else
        info "Installing zsh-autosuggestions..."
        git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
        success "zsh-autosuggestions installed"
    fi

    if [ -d ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]; then
        warn "zsh-syntax-highlighting already installed, skipping..."
    else
        info "Installing zsh-syntax-highlighting..."
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
        success "zsh-syntax-highlighting installed"
    fi

    if [ -d ~/.oh-my-zsh/custom/plugins/zsh-completions ]; then
        warn "zsh-completions already installed, skipping..."
    else
        info "Installing zsh-completions..."
        git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
        success "zsh-completions installed"
    fi

    if [ -d ~/.oh-my-zsh/custom/plugins/zsh-nvm ]; then
        warn "zsh-nvm already installed, skipping..."
    else
        info "Installing zsh-nvm..."
        git clone https://github.com/lukechilds/zsh-nvm ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-nvm
        success "zsh-nvm installed"
    fi
}

install_power10k() {
    if [ ! -d ~/.oh-my-zsh/custom/themes/powerlevel10k ]; then
        info "Installing powerlevel10k..."
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
        success "powerlevel10k installed"
    else
        warn "powerlevel10k already installed, skipping..."
    fi
    install_zsh_plugins
}

install_oh_my_zsh() {
    if [ -d "$HOME/.oh-my-zsh" ]; then
        warn "Oh My Zsh already installed, skipping..."
    else
        info "Installing Oh My Zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        chmod 744 ~/.oh-my-zsh/oh-my-zsh.sh
        success "Oh My Zsh installed"
    fi
    install_power10k
}

install_nvm() {
    if [[ ! -d ~/.nvm ]]; then
        info "Installing nvm..."
        info "Please enter your password if requested"
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
        success "nvm installed"
    else
        warn "nvm already installed, skipping..."
    fi
}

install_awscli() {
    if hash aws &>/dev/null; then
        warn "awscli already installed, skipping..."
    else
        info "Installing awscli..."
        info "Please enter your password if requested"
        curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
        sudo installer -pkg AWSCLIV2.pkg -target /
        aws --version
        rm AWSCLIV2.pkg || true
        success "awscli installed"
    fi
}

stow_dotfiles() {
    info "Stowing dotfiles..."

    local files=(
        ".gitconfig"
        ".zshrc"
        ".p10k.sh"
        ".config/iterm2/com.googlecode.iterm2.plist"
    )

    info "Removing existing config files"

    for file in "${files[@]}"; do
        rm -rf "$HOME/$file"
    done

    local dotfiles="git iterm2 zsh"

    stow -d ~/.dotfiles/.dots --verbose 1 -t ~/ $dotfiles

    success "dotfiles stowed"
}

clone_dotfiles_repo() {
    if [[ -d "$REPO_PATH" ]]; then
        warn "dotfiles already cloned, skipping..."
    else
        info "Cloning dotfiles repo..."
        git clone "$REPO_URL" "$REPO_PATH"
        success "dotfiles cloned"
    fi
}

info "Bootstraping..."

install_xcode
install_homebrew

info "Cloning .dotfiles repo from $REPO_URL into $REPO_PATH"
clone_dotfiles_repo

info "Change path to $REPO_PATH"
cd "$REPO_PATH" >/dev/null

info "======= Homebrew packages ======="
info "Installing Homebrew packages..."
info "Some packages may require sudo password"
info "Please enter your password if requested"
brew bundle --file=~/.dotfiles/Brewfile || exit 1
success "Finished installing Homebrew packages"

install_oh_my_zsh

info "======= CLIs ======="
install_nvm
install_awscli
success "Finished installing CLIs"

info "======= Configuration ======="
stow_dotfiles
success "Finished stowing dotfiles"
apply_mac_settings
success "Finished applying mac settings"

success "Done"